//
// Created by Moolet on 31/12/2020.
//

#include <boost/test/unit_test.hpp>
#include "default_test_fixture.h"
#include "midireader.h"
BOOST_AUTO_TEST_SUITE(basic_midi_read_test)

    unsigned int midi_monophonic_len = 255;
    unsigned char midi_monophonic_mid[] = {
            0x4d, 0x54, 0x68, 0x64, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01,
            0x01, 0xe0, 0x4d, 0x54, 0x72, 0x6b, 0x00, 0x00, 0x00, 0xe9, 0x00, 0xff,
            0x20, 0x01, 0x00, 0x00, 0xff, 0x03, 0x05, 0x73, 0x79, 0x6e, 0x74, 0x68,
            0x00, 0xff, 0x04, 0x14, 0x53, 0x74, 0x65, 0x69, 0x6e, 0x77, 0x61, 0x79,
            0x20, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x20, 0x50, 0x69, 0x61, 0x6e, 0x6f,
            0x00, 0xff, 0x58, 0x04, 0x04, 0x02, 0x18, 0x08, 0x00, 0xff, 0x59, 0x02,
            0x00, 0x00, 0x00, 0xff, 0x54, 0x05, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0x51, 0x03, 0x0a, 0x2c, 0x2b, 0x00, 0x90, 0x3c, 0x7f, 0x81, 0x1b,
            0x90, 0x3c, 0x00, 0x82, 0x45, 0x90, 0x3c, 0x7f, 0x81, 0x1b, 0x90, 0x3c,
            0x00, 0x82, 0x45, 0x90, 0x3c, 0x7f, 0x81, 0x1b, 0x90, 0x3c, 0x00, 0x82,
            0x45, 0x90, 0x3c, 0x7f, 0x81, 0x1b, 0x90, 0x3c, 0x00, 0x82, 0x45, 0x90,
            0x3c, 0x7f, 0x81, 0x1b, 0x90, 0x3c, 0x00, 0x82, 0x45, 0x90, 0x3c, 0x7f,
            0x81, 0x1b, 0x90, 0x3c, 0x00, 0x82, 0x45, 0x90, 0x3c, 0x7f, 0x81, 0x1b,
            0x90, 0x3c, 0x00, 0x82, 0x45, 0x90, 0x3d, 0x7f, 0x81, 0x1b, 0x90, 0x3d,
            0x00, 0x82, 0x45, 0x90, 0x38, 0x7f, 0x81, 0x1b, 0x90, 0x38, 0x00, 0x82,
            0x45, 0x90, 0x38, 0x7f, 0x81, 0x1b, 0x90, 0x38, 0x00, 0x82, 0x45, 0x90,
            0x38, 0x7f, 0x81, 0x1b, 0x90, 0x38, 0x00, 0x82, 0x45, 0x90, 0x38, 0x7f,
            0x81, 0x1b, 0x90, 0x38, 0x00, 0x82, 0x45, 0x90, 0x38, 0x7f, 0x81, 0x1b,
            0x90, 0x38, 0x00, 0x82, 0x45, 0x90, 0x38, 0x7f, 0x81, 0x1b, 0x90, 0x38,
            0x00, 0x82, 0x45, 0x90, 0x38, 0x7f, 0x81, 0x1b, 0x90, 0x38, 0x00, 0x82,
            0x45, 0x90, 0x37, 0x7f, 0x81, 0x1b, 0x90, 0x37, 0x00, 0x81, 0x98, 0x45,
            0xff, 0x2f, 0x00
    };

    unsigned int get_microseconds_per_tick(double beats_per_minute) {
        double micros_per_beat = 60000000.0 / beats_per_minute;
        unsigned int micros_per_tick = micros_per_beat / 480;
        return micros_per_tick;
    }

    BOOST_FIXTURE_TEST_CASE(can_read_basic_midi_file, DefaultTestFixture) {

        SD.setSDCardFileData(reinterpret_cast<char *>(midi_monophonic_mid), midi_monophonic_len);

        midireader reader;
        reader.open("1234.mid");

        double microsPerTick = get_microseconds_per_tick(120.0);

        int totalNumNotesRead = 0;
        for (int t = 0; t < reader.getNumTracks(); t++)
        {
            reader.setTrackNumber(t);
            int i = 0;
            long totalTicks = 0;
            long microseconds = 0;
            smfmidimessage *message;
            while ((message = reader.read()) != nullptr) {
                totalTicks += message->delta_ticks;
                microseconds += microsPerTick * message->delta_ticks;
                if (typeid(message) == typeid(smfsettempomessage)) {
                    printf("tempo change: %f\n", ((smfsettempomessage *)message)->getTempo());
                } else 
                if (typeid(message) == typeid(smfchannelvoicemessage)) {
                    smfchannelvoicemessage *channelvoicemessage = (smfchannelvoicemessage *)message;
                    printf("%5d: [%2d,%4d]: %6d: delta: %3d\tstatus: 0x%2x\tdata1: %3d\tdata2: %3d\tdata3: %2d\t\n",
                        microseconds/1000,
                        t,
                        i,
                        totalTicks,
                        channelvoicemessage->delta_ticks,
                        channelvoicemessage->status,
                        channelvoicemessage->data1,
                        channelvoicemessage->data2,
                        channelvoicemessage->data3);
                } else 

                i++;
            }
            totalNumNotesRead += i;
        }

        BOOST_CHECK_EQUAL(reader.getNumTracks(), 1);
        BOOST_CHECK_EQUAL(totalNumNotesRead, 39);
    }




BOOST_AUTO_TEST_SUITE_END()